 /*
 *  Copyright (C) W. Michael Knudson
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License along with this program; 
 *  if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable

layout (set = 0, binding = 0) uniform texture1D      texture1D_location[];
layout (set = 0, binding = 0) uniform texture2D      texture2D_location[];
layout (set = 0, binding = 0) uniform texture3D      texture3D_location[];
layout (set = 0, binding = 0) uniform texture1DArray texture1DArray_location[];
layout (set = 0, binding = 0) uniform texture2DArray texture2DArray_location[];
layout (set = 0, binding = 0) uniform textureCube    textureCube_location[];
layout (set = 1, binding = 0) uniform sampler        sampler_location[];

#define texture2DIndex(idx) texture2D_location[nonuniformEXT(idx)]
#define texture3DIndex(idx) texture3D_location[nonuniformEXT(idx)]
#define samplerIndex(idx)   sampler_location[nonuniformEXT(idx)]

#define TEXTURE2D(idx) texture2DIndex(rb.texture_ids[idx])
#define SAMPLER(idx) samplerIndex(rb.sampler_ids[idx])

#define SAMPLER2D(idx) sampler2D(TEXTURE2D(idx), SAMPLER(idx))

struct DummyAddress {
    uint _ref0;
    uint _ref1;
};

#define MAX_UNIFORM_BUFFERS 14
#define MAX_STORAGE_BUFFERS 16
#define MAX_ADDRESSES (MAX_UNIFORM_BUFFERS + MAX_STORAGE_BUFFERS)
#define MAX_TEXTURES 32
#define MAX_SAMPLERS 32

#define ADDRESS_PADDING(count) DummyAddress _addresspadding[count]
#define UBO_PADDING(count) DummyAddress _ubopadding[count]
#define SBO_PADDING(count) DummyAddress _sbopadding[count]
#define TEXTURE_PADDING uint texture_ids[MAX_TEXTURES]
#define SAMPLER_PADDING uint sampler_ids[MAX_SAMPLERS]

#if defined(DD_VERTEX_SHADER)
    #define DD_RESOURCE_BUFFER_BINDING set = 2, binding = 0 
    #define DD_RESOURCE_INDEX_OFFSET 0
#elif defined(DD_FRAGMENT_SHADER)
    #define DD_RESOURCE_BUFFER_BINDING set = 2, binding = 4
    #define DD_RESOURCE_INDEX_OFFSET 32
#endif

layout(buffer_reference) buffer _DefaultResourceBuffer {
    ADDRESS_PADDING(30);
    uint texture_ids[MAX_TEXTURES];
    uint sampler_ids[MAX_SAMPLERS];
    uint reserve0;
    uint reserve1;
    uint reserve2;
    uint reserve3;
};

#define DECLARE_DEFAULT_RESOURCE_BUFFER \
    layout (push_constant) uniform ResourceIndex { \
        layout(offset = DD_RESOURCE_INDEX_OFFSET) _DefaultResourceBuffer rb; \
    };

#define DECLARE_RESOURCE_BUFFER(BufferReference) \
    layout (push_constant) uniform ResourceIndex { \
        layout(offset = DD_RESOURCE_INDEX_OFFSET) BufferReference rb; \
    };

#define RB(var) rb.var
